# -------------------
# Install dependencies on all CloudLab nodes
# Ubuntu 22.04 (Jammy) compatible
# -------------------
- name: Install dependencies on all CloudLab nodes
  hosts: cloudlab_nodes
  become: yes
  tasks:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install base packages
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
          - git
        state: present

    # -------------------
    # Kernel modules + sysctls required by Kubernetes
    # -------------------
    - name: Ensure k8s modules are loaded at boot
      ansible.builtin.copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter
        owner: root
        group: root
        mode: '0644'

    - name: Load overlay module now
      ansible.builtin.command: modprobe overlay
      changed_when: false
      failed_when: false

    - name: Load br_netfilter module now
      ansible.builtin.command: modprobe br_netfilter
      changed_when: false
      failed_when: false

    - name: Apply k8s sysctl settings
      ansible.builtin.copy:
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
        owner: root
        group: root
        mode: '0644'

    - name: sysctl --system
      ansible.builtin.command: sysctl --system
      changed_when: false

    # Disable swap (required for kubeadm init)
    - name: Disable swap immediately (ignore if none)
      ansible.builtin.command: swapoff -a
      changed_when: false
      failed_when: false

    - name: Ensure swap is commented in fstab
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: '^(?!#)(.+\s+swap\s+.+)$'
        replace: '# \1'
      failed_when: false

    # -------------------
    # containerd setup
    # -------------------
    - name: Ensure keyrings directory exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Docker GPG key
      ansible.builtin.shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker apt repo (for containerd)
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        filename: containerd

    - name: Install containerd
      ansible.builtin.apt:
        name: containerd.io
        state: present
        update_cache: yes

    - name: Write containerd config (CRI + systemd cgroup)
      ansible.builtin.copy:
        dest: /etc/containerd/config.toml
        content: |
          version = 2
          disabled_plugins = []

          [plugins."io.containerd.grpc.v1.cri"]
            sandbox_image = "registry.k8s.io/pause:3.9"
            [plugins."io.containerd.grpc.v1.cri".containerd]
              snapshotter = "overlayfs"
              default_runtime_name = "runc"
            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
              runtime_type = "io.containerd.runc.v2"
              [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                SystemdCgroup = true
        owner: root
        group: root
        mode: '0644'

    - name: Restart containerd
      ansible.builtin.systemd:
        name: containerd
        enabled: yes
        state: restarted
        daemon_reload: yes

    - name: Wait for containerd socket
      ansible.builtin.wait_for:
        path: /run/containerd/containerd.sock
        state: present
        timeout: 30

    # -------------------
    # Kubernetes repo + tools (includes cri-tools)
    # -------------------
    - name: Download Kubernetes GPG key
      ansible.builtin.shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-archive-keyring.gpg

    - name: Add Kubernetes apt repo
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /"
        state: present
        filename: kubernetes

    - name: Install kubeadm, kubelet, kubectl, cri-tools
      ansible.builtin.apt:
        name:
          - kubeadm
          - kubelet
          - kubectl
          - cri-tools
        state: present
        update_cache: yes

    - name: Hold kube packages
      ansible.builtin.command: apt-mark hold kubelet kubeadm kubectl cri-tools
      register: apt_mark_hold_result
      changed_when: "'hold' in (apt_mark_hold_result.stdout | default(''))"

    - name: Configure crictl to use containerd
      ansible.builtin.copy:
        dest: /etc/crictl.yaml
        content: |
          runtime-endpoint: unix:///run/containerd/containerd.sock
          image-endpoint: unix:///run/containerd/containerd.sock
          timeout: 10
          debug: false
        owner: root
        group: root
        mode: '0644'

    - name: Verify CRI is responsive
      ansible.builtin.command: crictl info
      register: crictl_info
      changed_when: false

    # -------------------
    # Helm install
    # -------------------
    - name: Download Helm install script
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        dest: /tmp/get-helm-3
        mode: '0755'

    - name: Install Helm if not present
      ansible.builtin.command: /tmp/get-helm-3
      args:
        creates: /usr/local/bin/helm

    # -------------------
    # Verify installs
    # -------------------
    - name: Check versions
      ansible.builtin.command: "{{ item }}"
      loop:
        - containerd --version
        - crictl --version
        - kubeadm version
        - kubelet --version
        - kubectl version --client
        - helm version
        - git --version
      register: version_output
      ignore_errors: yes

    - ansible.builtin.debug:
        var: version_output.results
