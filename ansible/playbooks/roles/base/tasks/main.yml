---
# roles/base/tasks/main.yml
# -------------------------
# Base system configuration for Kubernetes cluster nodes.
# Includes apt setup, kernel modules, sysctl, and swap disable.

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Install base packages
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - software-properties-common
      - git
      - python3-pip
    state: present

# --- Kernel + sysctl configuration ---
- name: Ensure k8s modules load at boot
  ansible.builtin.copy:
    dest: /etc/modules-load.d/k8s.conf
    content: |
      overlay
      br_netfilter
    mode: '0644'

- name: Load kernel modules immediately
  ansible.builtin.command: modprobe {{ item }}
  loop:
    - overlay
    - br_netfilter
  changed_when: false
  failed_when: false

- name: Configure sysctl for Kubernetes networking
  ansible.builtin.copy:
    dest: /etc/sysctl.d/99-kubernetes-cri.conf
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1
    mode: '0644'

- name: Apply sysctl settings
  ansible.builtin.command: sysctl --system
  changed_when: false

# --- Swap must be disabled for kubelet ---
- name: Disable swap immediately
  ansible.builtin.command: swapoff -a
  changed_when: false
  failed_when: false

- name: Ensure swap is disabled in fstab
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^(?!#)(.+\s+swap\s+.+)$'
    replace: '# \1'
  failed_when: false

# --- Clone CampusConnect Helm charts ---
- name: Ensure local repository directory exists
  ansible.builtin.file:
    path: "/users/{{ ansible_ssh_user }}/local/repository"
    state: directory
    owner: "{{ ansible_ssh_user }}"
    mode: '0755'

- name: Clone CampusConnect repo (for Helm charts)
  ansible.builtin.git:
    repo: "https://github.com/CSC478-WCU/CC2-Cluster.git"
    dest: "/users/{{ ansible_ssh_user }}/local/repository"
    version: "{{ branch | default('main') }}"
    force: yes
    update: yes

- block:
    - name: Install disk tools for OSD prep
      ansible.builtin.apt:
        name:
          - parted
          - gdisk
          - util-linux
        state: present
        update_cache: yes

    - name: Resolve OSD device and partition vars
      ansible.builtin.set_fact:
        _osd_device: "{{ osd_device | default('/dev/sdb') }}"
        _osd_partnum: "{{ osd_partition_number | default(1) }}"
        _osd_partition: "{{ (osd_device | default('/dev/sdb')) ~ (osd_partition_number | default(1)) }}"

    - name: Guardrail | refuse to touch likely boot disk
      ansible.builtin.fail:
        msg: "Refusing to partition {{ _osd_device }} (looks like the boot/system disk). Set osd_device to a non-boot disk."
      when: _osd_device == '/dev/sda'

    - name: Check that target OSD device exists and is a block device
      ansible.builtin.stat:
        path: "{{ _osd_device }}"
      register: osd_dev_stat

    - name: Fail if target OSD device is missing
      ansible.builtin.fail:
        msg: "OSD device {{ _osd_device }} not found on this host."
      when: not osd_dev_stat.stat.exists or not osd_dev_stat.stat.isblk

    - name: Create GPT and a single primary partition (1MiB -> 100%)
      community.general.parted:
        device: "{{ _osd_device }}"
        number: "{{ _osd_partnum }}"
        label: gpt
        state: present
        part_start: 1MiB
        part_end: 100%
      register: parted_result

    - name: Udev settle after partitioning
      ansible.builtin.command: udevadm settle
      changed_when: false

    - name: Wipe any signatures on the new OSD partition
      ansible.builtin.command: "wipefs -a {{ _osd_partition }}"
      args:
        warn: false
      changed_when: "'/dev/' in _osd_partition"
      failed_when: false

    - name: Show final OSD partition for this node
      ansible.builtin.debug:
        msg: "OSD partition ready: {{ _osd_partition }}"
  when: true